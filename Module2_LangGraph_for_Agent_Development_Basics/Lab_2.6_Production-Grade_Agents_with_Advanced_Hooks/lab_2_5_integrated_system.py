# -*- coding: utf-8 -*-
"""lab_2_5_integrated_system

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m7cBnCe7IE13SyonR50bP3YSfDw_L1Ot
"""

# ==============================================================================
# 1. SETUP - INSTALL AND IMPORT LIBS
# ==============================================================================
!pip install langgraph langchain-core langchain-openai --quiet

from langgraph.graph import StateGraph, START, END
from langgraph.prebuilt import create_react_agent
from langchain_core.messages import SystemMessage, HumanMessage, AIMessage, BaseMessage
from langchain_openai import ChatOpenAI
from langchain_core.tools import tool
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from typing import TypedDict, Annotated, Sequence, Literal
import operator
from datetime import datetime
import os
import uuid

try:
    from google.colab import userdata
    os.environ["OPENAI_API_KEY"] = userdata.get('OPENAI_API_KEY')
    print("‚úÖ OpenAI API Key set successfully.")
except (ImportError, userdata.SecretNotFoundError):
    print("‚ö†Ô∏è API Key not found. Please set it in Colab Secrets.")

# ==============================================================================
# 2. DEFINE ALL COMPONENTS: TOOLS, STATE, AND HOOK NODES
# ==============================================================================
@tool
def get_leave_balance(employee_id: str) -> dict:
    """Gets the available leave balance for a given employee ID."""
    print(f"--- TOOL: Checking leave balance for {employee_id} ---")
    return {"vacation": 10, "sick": 5}

@tool
def get_employee_salary(employee_id: str) -> str:
    """Retrieves the annual salary for a given employee ID."""
    print(f"--- TOOL: Accessing sensitive salary data for {employee_id} ---")
    return "The annual salary for emp_123 is $80,000."

class HRAgentState(TypedDict):
    messages: Annotated[Sequence[BaseMessage], operator.add]
    employee_name: str
    user_role: str
    conversation_summary: str
    pii_detected: bool
    escalation_reason: str
    escalation_ticket_id: str
    remaining_steps: int
    system_prompt: str

def summarization_node(state: HRAgentState) -> dict:
    print("\n--- üß† PRE-MODEL HOOK: Summarizer ---")
    num_messages = len(state['messages'])
    if num_messages > 4:
        summary = f"The conversation with {state['employee_name']} has covered leave balances."
        summary_msg = SystemMessage(content=f"[Conversation Summary: {summary}]")
        recent_msgs = [m for m in state['messages'] if not isinstance(m, SystemMessage)][-3:]
        new_messages = [summary_msg] + recent_msgs
        return {"messages": new_messages, "conversation_summary": summary}
    return {}

def dynamic_prompt_node(state: HRAgentState) -> dict:
    print("--- üß† PRE-MODEL HOOK: Dynamic Prompter ---")
    prompt_parts = [
        f"You are an HR assistant for {state['employee_name']} (role: '{state['user_role']}')."
    ]
    system_prompt = "\n".join(prompt_parts)
    return {"system_prompt": system_prompt}

def agent_node(state: HRAgentState, agent_runnable) -> dict:
    print("--- ü§ñ AGENT EXECUTING ---")
    # Prepend the system prompt to the messages list
    messages_with_system_prompt = [SystemMessage(content=state.get("system_prompt", "You are an HR assistant."))] + list(state["messages"])
    agent_inputs = {"messages": messages_with_system_prompt}
    result = agent_runnable.invoke(agent_inputs)
    print("--- ‚úÖ AGENT FINISHED ---")
    return result


def guardrail_and_route(state: HRAgentState) -> Literal["escalate", "__end__"]:
    print("--- üö¶ POST-MODEL HOOK & ROUTER: Guardrail ---")
    last_message = state['messages'][-1]
    if not isinstance(last_message, AIMessage):
        return "__end__"

    content = last_message.content.lower()
    if "salary" in content or "$" in content:
        print("üö® PII DETECTED! Routing to escalation path.")
        return "escalate"

    print("‚úÖ No PII detected. Ending the turn.")
    return "__end__"

def escalation_node(state: HRAgentState) -> dict:
    print("--- üî• ESCALATION PATH ---")
    ticket_id = f"HR-INCIDENT-{uuid.uuid4().hex[:8].upper()}"
    reason = "PII Leak Attempt"
    last_message = state['messages'][-1]
    redacted_msg = AIMessage(content="‚ö†Ô∏è I cannot disclose sensitive PII. This event has been flagged.", id=last_message.id)
    return {"messages": [redacted_msg], "pii_detected": True, "escalation_reason": reason, "escalation_ticket_id": ticket_id}

# ==============================================================================
# 3. CREATE AND RUN THE INTEGRATED GRAPH
# ==============================================================================
def main():
    print("\n--- Lab 2.5: Fully Integrated System (Error-Free) ---")
    model = ChatOpenAI(model="gpt-4o-mini", temperature=0)
    tools = [get_leave_balance, get_employee_salary]

    # The prompt template no longer needs the system_prompt placeholder
    prompt = ChatPromptTemplate.from_messages([
        MessagesPlaceholder(variable_name="messages"),
    ])

    agent_runnable = create_react_agent(model, tools, prompt=prompt)

    workflow = StateGraph(HRAgentState)
    workflow.add_node("summarizer", summarization_node)
    workflow.add_node("dynamic_prompter", dynamic_prompt_node)
    workflow.add_node("agent", lambda state: agent_node(state, agent_runnable))
    workflow.add_node("escalation", escalation_node)

    workflow.set_entry_point("summarizer")
    workflow.add_edge("summarizer", "dynamic_prompter")
    workflow.add_edge("dynamic_prompter", "agent")
    workflow.add_conditional_edges("agent", guardrail_and_route, {"escalate": "escalation", "__end__": END})
    workflow.add_edge("escalation", END)

    app = workflow.compile()

    # --- Test Case: PII Query ---
    print("\n\n" + "="*60)
    print("üöÄ TEST CASE: PII Query (Triggers Guardrail/Escalation)")
    print("="*60)
    pii_convo = [HumanMessage(content="What is the annual salary for employee emp_123?")]
    state_pii = {
        "messages": pii_convo, "employee_name": "Charlie", "user_role": "manager",
        "remaining_steps": 5, "conversation_summary": "", "pii_detected": False,
        "escalation_reason": "", "escalation_ticket_id": "", "system_prompt": ""
    }
    result_pii = app.invoke(state_pii)

    print("\n" + "="*50)
    print("--- FINAL INTEGRATED SYSTEM OUTPUT (PII TEST) ---")
    print(f"PII Detected and Blocked: {result_pii.get('pii_detected', False)}")
    print(f"Escalation Ticket ID: {result_pii.get('escalation_ticket_id', 'N/A')}")
    print("\n--- Final Agent Response (After all hooks) ---")
    print(result_pii['messages'][-1].content)
    print("="*50)

if __name__ == "__main__":
    main()