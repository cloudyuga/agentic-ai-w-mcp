# -*- coding: utf-8 -*-
"""lab_2_3_pre_model_hooks

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WvSAViLdpDCn90YkvtX9XhK623JbjaAj
"""

# ==============================================================================
# 1. SETUP - INSTALL AND IMPORT LIBS
# ==============================================================================
!pip install langgraph langchain-core langchain-openai --quiet

from langgraph.graph import StateGraph, START, END
from langgraph.prebuilt import create_react_agent
from langchain_core.messages import SystemMessage, HumanMessage, AIMessage, BaseMessage
from langchain_openai import ChatOpenAI
from langchain_core.tools import tool
from typing import TypedDict, Annotated, Sequence
import operator
import os

try:
    from google.colab import userdata
    os.environ["OPENAI_API_KEY"] = userdata.get('OPENAI_API_KEY')
    print("✅ OpenAI API Key set successfully.")
except (ImportError, userdata.SecretNotFoundError):
    print("⚠️ API Key not found. Please set it in Colab Secrets.")

# ==============================================================================
# 2. DEFINE TOOLS, STATE, AND PRE-MODEL HOOK NODE
# ==============================================================================
@tool
def get_leave_balance(employee_id: str) -> dict:
    """Gets the leave balance for an employee."""
    return {"vacation": 10, "sick": 5}

class HRAgentState(TypedDict):
    messages: Annotated[Sequence[BaseMessage], operator.add]
    conversation_summary: str

def summarization_node(state: HRAgentState) -> HRAgentState:
    print("\n--- Pre-Model Hook: Summarization Node ---")

    current_messages = state['messages']
    num_messages = len(current_messages)

    if num_messages > 5:
        print(f"Conversation has {num_messages} messages. Summarizing...")

        system_msgs = [m for m in current_messages if isinstance(m, SystemMessage)]
        recent_msgs = [m for m in current_messages if not isinstance(m, SystemMessage)][-3:]

        summary = "The conversation has covered leave balances and time-off requests."
        summary_message = SystemMessage(content=f"[Conversation Summary: {summary}]")

        new_messages = system_msgs + [summary_message] + recent_msgs
        print(f"Reduced message count from {num_messages} to {len(new_messages)}.")

        return {"messages": new_messages, "conversation_summary": summary}
    else:
        print(f"Conversation has {num_messages} messages. No summarization needed.")
        return {}

# ==============================================================================
# 3. CREATE AND RUN THE GRAPH
# ==============================================================================
def main():
    print("\n--- Lab 2.3: Pre-Model Hooks (Conversation Summarization) ---")
    model = ChatOpenAI(model="gpt-4o-mini", temperature=0)
    tools = [get_leave_balance]

    agent_runnable = create_react_agent(model, tools)

    workflow = StateGraph(HRAgentState)
    workflow.add_node("summarizer", summarization_node)
    workflow.add_node("agent", agent_runnable)

    workflow.set_entry_point("summarizer")
    workflow.add_edge("summarizer", "agent")
    workflow.add_edge("agent", END)

    app = workflow.compile()

    long_conversation = [
        HumanMessage(content="What's my leave balance?"),
        AIMessage(content="You have 15 vacation days."),
        HumanMessage(content="Can I take time off next week?"),
        AIMessage(content="Yes, you can submit a request."),
        HumanMessage(content="How do I submit it?"),
        AIMessage(content="Use the submit_leave_request tool."),
        HumanMessage(content="What about sick leave?"),
    ]

    state = {"messages": long_conversation}

    result = app.invoke(state)

    print("\n--- Final Agent Response ---")
    print(result['messages'][-1].content)
    print("\n--- Final State ---")
    print(f"Summary generated: '{result['conversation_summary']}'")

if __name__ == "__main__":
    main()