# -*- coding: utf-8 -*-
"""lab_2_2_dynamic_prompts

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19UrI0futJuIKE5ox8ec4So06LXEfBtNB
"""

# ==============================================================================
# 1. SETUP - INSTALL AND IMPORT LIBS
# ==============================================================================
!pip install langgraph langchain-core langchain-openai --quiet

from langgraph.prebuilt import create_react_agent
from langchain_core.messages import SystemMessage, HumanMessage, BaseMessage
from langchain_openai import ChatOpenAI
from langchain_core.tools import tool
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from typing import TypedDict, Annotated, Sequence
import operator
from datetime import datetime
import os

try:
    from google.colab import userdata
    os.environ["OPENAI_API_KEY"] = userdata.get('OPENAI_API_KEY')
    print("✅ OpenAI API Key set successfully.")
except (ImportError, userdata.SecretNotFoundError):
    print("⚠️ API Key not found. Please set it in Colab Secrets.")

# ==============================================================================
# 2. DEFINE TOOLS, STATE, AND A DYNAMIC PROMPT FUNCTION
# ==============================================================================
@tool
def get_leave_balance(employee_id: str) -> dict:
    """Gets the leave balance for an employee."""
    balances = {"emp_456": {"vacation": 8, "sick": 12}}
    return balances.get(employee_id, {"error": "Employee not found."})

# CORRECTED STATE DEFINITION
class HRAgentState(TypedDict):
    messages: Annotated[Sequence[BaseMessage], operator.add]
    employee_name: str
    department: str
    user_role: str
    system_prompt: str
    # The create_react_agent requires this key for its internal step management.
    remaining_steps: int

# ==============================================================================
# 3. CREATE THE AGENT WITH A DYNAMIC PROMPT TEMPLATE
# ==============================================================================
def main():
    print("\n--- Lab 2.2: Dynamic Prompts with LCEL (Error-Free) ---")
    model = ChatOpenAI(model="gpt-4o-mini", temperature=0)
    tools = [get_leave_balance]

    prompt = ChatPromptTemplate.from_messages(
        [
            ("system", "{system_prompt}"),
            MessagesPlaceholder(variable_name="messages"),
        ]
    )

    agent = create_react_agent(model, tools, state_schema=HRAgentState, prompt=prompt)

    def run_agent_with_dynamic_prompt(state):
        prompt_parts = [f"You are an HR assistant helping {state['employee_name']} from the {state['department']} department."]
        if state['user_role'] == 'manager':
            prompt_parts.append("As a manager, you have access to approval tools.")
        else:
            prompt_parts.append("As an employee, you can ask about personal HR queries.")

        hour = datetime.now().hour
        if hour < 9 or hour > 17:
            prompt_parts.append("\nNote: It is outside of standard business hours.")

        state["system_prompt"] = "\n".join(prompt_parts)

        print(f"\n--- Injecting Dynamic Prompt for user '{state['employee_name']}' ---")
        print(f"'{state['system_prompt']}'")
        print("----------------------------------------------------")

        return agent.invoke(state)

    # --- Test Case 1: Employee Role ---
    # CORRECTED: Added the required 'remaining_steps' key
    state_employee = {
        "messages": [HumanMessage(content="How many vacation days do I have left?")],
        "employee_name": "Sarah",
        "department": "Sales",
        "user_role": "employee",
        "remaining_steps": 5,
    }
    result_employee = run_agent_with_dynamic_prompt(state_employee)
    print("\n--- Agent Output (Employee) ---")
    print(result_employee['messages'][-1].content)

    # --- Test Case 2: Manager Role ---
    # CORRECTED: Added the required 'remaining_steps' key
    state_manager = {
        "messages": [HumanMessage(content="I need to approve a leave request.")],
        "employee_name": "David",
        "department": "Engineering",
        "user_role": "manager",
        "remaining_steps": 5,
    }
    result_manager = run_agent_with_dynamic_prompt(state_manager)
    print("\n--- Agent Output (Manager) ---")
    print(result_manager['messages'][-1].content)

if __name__ == "__main__":
    main()