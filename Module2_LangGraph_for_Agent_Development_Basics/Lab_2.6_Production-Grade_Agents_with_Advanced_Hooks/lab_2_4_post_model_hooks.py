# -*- coding: utf-8 -*-
"""lab_2_4_post_model_hooks

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rnms5V8-Pu-I3VkzOpThNb8SqvRsBDn9
"""

# ==============================================================================
# 1. SETUP - INSTALL AND IMPORT LIBS
# ==============================================================================
!pip install langgraph langchain-core langchain-openai --quiet

from langgraph.graph import StateGraph, START, END
from langgraph.prebuilt import create_react_agent
from langchain_core.messages import AIMessage, BaseMessage, HumanMessage
from langchain_openai import ChatOpenAI
from langchain_core.tools import tool
from typing import TypedDict, Annotated, Sequence
import operator
import os

try:
    from google.colab import userdata
    os.environ["OPENAI_API_KEY"] = userdata.get('OPENAI_API_KEY')
    print("‚úÖ OpenAI API Key set successfully.")
except (ImportError, userdata.SecretNotFoundError):
    print("‚ö†Ô∏è API Key not found. Please set it in Colab Secrets.")

# ==============================================================================
# 2. DEFINE TOOLS, STATE, AND POST-MODEL HOOK NODE
# ==============================================================================
@tool
def get_employee_salary(employee_id: str) -> str:
    """Gets the salary for an employee."""
    return "The salary for emp_123 is $80,000."

class HRAgentState(TypedDict):
    messages: Annotated[Sequence[BaseMessage], operator.add]
    pii_detected: bool
    requires_manager_approval: bool

def guardrail_node(state: HRAgentState) -> HRAgentState:
    print("\n--- Post-Model Hook: Guardrail Node ---")

    last_message = state['messages'][-1]
    if not isinstance(last_message, AIMessage):
        return {}

    content = last_message.content.lower()

    pii_detected = False
    if "salary" in content or "ssn" in content or "bank account" in content:
        print("üö® PII DETECTED in agent response!")
        pii_detected = True

        redacted_message = AIMessage(
            content="‚ö†Ô∏è I cannot share sensitive personal information like salary details. Please contact HR directly for this information.",
            id=last_message.id
        )
        # Replace the last message with the redacted one
        updated_messages = list(state['messages'][:-1]) + [redacted_message]
        return {"messages": updated_messages, "pii_detected": True}

    print("‚úÖ No PII detected in response.")
    return {"pii_detected": False}

# ==============================================================================
# 3. CREATE AND RUN THE GRAPH
# ==============================================================================
def main():
    print("\n--- Lab 2.4: Post-Model Hooks (PII Guardrail) ---")
    model = ChatOpenAI(model="gpt-4o-mini", temperature=0)
    tools = [get_employee_salary]

    agent_runnable = create_react_agent(model, tools)

    workflow = StateGraph(HRAgentState)
    workflow.add_node("agent", agent_runnable)
    workflow.add_node("guardrail", guardrail_node)

    workflow.set_entry_point("agent")
    workflow.add_edge("agent", "guardrail")
    workflow.add_edge("guardrail", END)

    app = workflow.compile()

    # This query will tempt the agent to reveal sensitive information
    state = {"messages": [HumanMessage(content="What is the salary for emp_123?")]}

    result = app.invoke(state)

    print("\n--- Final Agent Response (After Guardrail) ---")
    print(result['messages'][-1].content)
    print("\n--- Final State ---")
    print(f"PII Detected: {result['pii_detected']}")

if __name__ == "__main__":
    main()