{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Built-in Middlewares for HR Agents - LangChain 1.0\n",
        "\n",
        "**Module:** Built-in Middleware Components\n",
        "\n",
        "**What you'll learn:**\n",
        "- 📝 SummarizationMiddleware - Automatic conversation summarization\n",
        "- 👤 HumanInTheLoopMiddleware - Manual approval workflows\n",
        "- 🎯 Production patterns for HR use cases\n",
        "\n",
        "**HR Use Cases:**\n",
        "- Long employee consultation sessions with memory management\n",
        "- Critical HR decisions requiring manager approval\n",
        "- Salary updates with multi-level authorization\n",
        "- Compliance-driven approval workflows\n",
        "\n",
        "**Time:** 1-2 hours\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Setup: Install Dependencies"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Install LangChain 1.0 and middleware packages\n",
        "!pip install --pre -U langchain langchain-openai langgraph\n",
        "!pip install langgraph-checkpoint-sqlite"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Setup: Configuration and Imports"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Configure API key\n",
        "from google.colab import userdata\n",
        "import os\n",
        "\n",
        "os.environ['OPENAI_API_KEY'] = userdata.get('OPENAI_API_KEY')\n",
        "\n",
        "# Imports\n",
        "from langchain.agents import create_agent, AgentState\n",
        "from langchain_openai import ChatOpenAI\n",
        "from langchain_core.tools import tool\n",
        "from langgraph.checkpoint.memory import InMemorySaver\n",
        "from typing import Annotated\n",
        "from datetime import datetime\n",
        "import json\n",
        "\n",
        "print(\"✅ Setup complete!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Setup: HR Tools and Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# HR Employee Database\n",
        "EMPLOYEES = {\n",
        "    \"101\": {\n",
        "        \"name\": \"Priya Sharma\",\n",
        "        \"department\": \"Engineering\",\n",
        "        \"role\": \"Senior Developer\",\n",
        "        \"salary\": 120000,\n",
        "        \"leave_balance\": 12,\n",
        "        \"manager_id\": \"102\"\n",
        "    },\n",
        "    \"102\": {\n",
        "        \"name\": \"Rahul Verma\",\n",
        "        \"department\": \"Engineering\",\n",
        "        \"role\": \"Engineering Manager\",\n",
        "        \"salary\": 180000,\n",
        "        \"leave_balance\": 8,\n",
        "        \"manager_id\": \"103\"\n",
        "    },\n",
        "    \"103\": {\n",
        "        \"name\": \"Anjali Patel\",\n",
        "        \"department\": \"HR\",\n",
        "        \"role\": \"HR Director\",\n",
        "        \"salary\": 200000,\n",
        "        \"leave_balance\": 15,\n",
        "        \"manager_id\": None\n",
        "    },\n",
        "    \"104\": {\n",
        "        \"name\": \"Arjun Reddy\",\n",
        "        \"department\": \"Sales\",\n",
        "        \"role\": \"Sales Team Lead\",\n",
        "        \"salary\": 150000,\n",
        "        \"leave_balance\": 10,\n",
        "        \"manager_id\": \"105\"\n",
        "    },\n",
        "    \"105\": {\n",
        "        \"name\": \"Sneha Gupta\",\n",
        "        \"department\": \"Sales\",\n",
        "        \"role\": \"Sales Director\",\n",
        "        \"salary\": 190000,\n",
        "        \"leave_balance\": 5,\n",
        "        \"manager_id\": \"103\"\n",
        "    }\n",
        "}\n",
        "\n",
        "# Define HR tools\n",
        "@tool\n",
        "def get_employee_info(employee_id: Annotated[str, \"Employee ID\"]) -> str:\n",
        "    \"\"\"Get employee information by ID.\"\"\"\n",
        "    if employee_id in EMPLOYEES:\n",
        "        emp = EMPLOYEES[employee_id]\n",
        "        return f\"{emp['name']} - {emp['department']} - {emp['role']}\"\n",
        "    return f\"Employee {employee_id} not found\"\n",
        "\n",
        "@tool\n",
        "def check_leave_balance(employee_id: Annotated[str, \"Employee ID\"]) -> str:\n",
        "    \"\"\"Check leave balance for an employee.\"\"\"\n",
        "    if employee_id in EMPLOYEES:\n",
        "        emp = EMPLOYEES[employee_id]\n",
        "        return f\"{emp['name']} has {emp['leave_balance']} days of leave remaining\"\n",
        "    return f\"Employee {employee_id} not found\"\n",
        "\n",
        "@tool\n",
        "def get_salary_info(employee_id: Annotated[str, \"Employee ID\"]) -> str:\n",
        "    \"\"\"Get salary information. SENSITIVE operation.\"\"\"\n",
        "    if employee_id in EMPLOYEES:\n",
        "        emp = EMPLOYEES[employee_id]\n",
        "        return f\"{emp['name']}'s annual salary: ₹{emp['salary']:,}\"\n",
        "    return f\"Employee {employee_id} not found\"\n",
        "\n",
        "@tool\n",
        "def update_salary(\n",
        "    employee_id: Annotated[str, \"Employee ID\"],\n",
        "    new_salary: Annotated[int, \"New salary amount\"]\n",
        ") -> str:\n",
        "    \"\"\"Update employee salary. CRITICAL operation requiring approval.\"\"\"\n",
        "    if employee_id in EMPLOYEES:\n",
        "        old_salary = EMPLOYEES[employee_id]['salary']\n",
        "        EMPLOYEES[employee_id]['salary'] = new_salary\n",
        "        return f\"✅ Salary updated for {EMPLOYEES[employee_id]['name']}: ₹{old_salary:,} → ₹{new_salary:,}\"\n",
        "    return f\"Employee {employee_id} not found\"\n",
        "\n",
        "@tool\n",
        "def approve_leave(\n",
        "    employee_id: Annotated[str, \"Employee ID\"],\n",
        "    days: Annotated[int, \"Number of leave days\"]\n",
        ") -> str:\n",
        "    \"\"\"Approve leave request. Requires manager approval.\"\"\"\n",
        "    if employee_id in EMPLOYEES:\n",
        "        emp = EMPLOYEES[employee_id]\n",
        "        if emp['leave_balance'] >= days:\n",
        "            EMPLOYEES[employee_id]['leave_balance'] -= days\n",
        "            return f\"✅ Approved {days} days leave for {emp['name']}. Remaining: {EMPLOYEES[employee_id]['leave_balance']} days\"\n",
        "        return f\"❌ Insufficient leave balance. {emp['name']} has only {emp['leave_balance']} days\"\n",
        "    return f\"Employee {employee_id} not found\"\n",
        "\n",
        "print(\"✅ HR tools and data configured!\")\n",
        "print(f\"Total employees: {len(EMPLOYEES)}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "# Part 1: SummarizationMiddleware 📝\n",
        "\n",
        "## Why Summarization?\n",
        "\n",
        "**Problem:** Long HR consultation sessions exceed LLM context windows\n",
        "\n",
        "**Example Scenario:**\n",
        "```\n",
        "Employee: \"I joined in 2020...\"\n",
        "HR Agent: \"Great! Tell me more...\"\n",
        "Employee: \"I work in Engineering...\"\n",
        "HR Agent: \"What can I help with?\"\n",
        "Employee: \"Need leave for wedding...\"\n",
        "...\n",
        "[After 50 messages, context is too long!]\n",
        "```\n",
        "\n",
        "**Solution:** SummarizationMiddleware automatically:\n",
        "- Monitors message token count\n",
        "- Summarizes old messages when threshold reached\n",
        "- Keeps recent messages intact\n",
        "- Preserves conversation context\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Lab 1.1: Basic Summarization Setup"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Note: As of LangChain 1.0, SummarizationMiddleware is available via:\n",
        "# from langchain.agents import SummarizationMiddleware\n",
        "\n",
        "# For this demo, we'll implement a simplified version\n",
        "# that demonstrates the concept\n",
        "\n",
        "from langchain_core.messages import SystemMessage, HumanMessage, AIMessage\n",
        "\n",
        "class SimpleSummarizationMiddleware:\n",
        "    \"\"\"Simplified summarization middleware for demonstration.\"\"\"\n",
        "    \n",
        "    def __init__(\n",
        "        self,\n",
        "        model: ChatOpenAI,\n",
        "        max_tokens: int = 2000,\n",
        "        messages_to_keep: int = 5\n",
        "    ):\n",
        "        self.model = model\n",
        "        self.max_tokens = max_tokens\n",
        "        self.messages_to_keep = messages_to_keep\n",
        "        self.summary = None\n",
        "    \n",
        "    def estimate_tokens(self, messages) -> int:\n",
        "        \"\"\"Rough token estimation.\"\"\"\n",
        "        total = 0\n",
        "        for msg in messages:\n",
        "            if hasattr(msg, 'content'):\n",
        "                # Rough estimate: ~1.3 tokens per word\n",
        "                total += len(msg.content.split()) * 1.3\n",
        "        return int(total)\n",
        "    \n",
        "    def summarize_messages(self, messages) -> str:\n",
        "        \"\"\"Create summary of old messages.\"\"\"\n",
        "        # Prepare conversation for summarization\n",
        "        conversation = \"\\n\".join([\n",
        "            f\"{msg.type}: {msg.content}\" \n",
        "            for msg in messages \n",
        "            if hasattr(msg, 'content')\n",
        "        ])\n",
        "        \n",
        "        summary_prompt = f\"\"\"Summarize this HR conversation concisely:\n",
        "\n",
        "{conversation}\n",
        "\n",
        "Summary (2-3 sentences):\"\"\"\n",
        "        \n",
        "        response = self.model.invoke([HumanMessage(content=summary_prompt)])\n",
        "        return response.content\n",
        "    \n",
        "    def pre_model_hook(self, state: AgentState) -> dict:\n",
        "        \"\"\"Check if summarization is needed.\"\"\"\n",
        "        messages = state.get(\"messages\", [])\n",
        "        \n",
        "        if len(messages) < self.messages_to_keep:\n",
        "            return {}\n",
        "        \n",
        "        # Estimate tokens\n",
        "        token_count = self.estimate_tokens(messages)\n",
        "        \n",
        "        print(f\"\\n📊 Token count: ~{token_count} (threshold: {self.max_tokens})\")\n",
        "        \n",
        "        if token_count > self.max_tokens:\n",
        "            print(f\"🔄 Summarizing old messages...\")\n",
        "            \n",
        "            # Messages to summarize (all except recent)\n",
        "            to_summarize = messages[:-self.messages_to_keep]\n",
        "            recent_messages = messages[-self.messages_to_keep:]\n",
        "            \n",
        "            # Create summary\n",
        "            summary = self.summarize_messages(to_summarize)\n",
        "            self.summary = summary\n",
        "            \n",
        "            print(f\"✅ Summary created: {len(to_summarize)} messages → {len(summary.split())} words\")\n",
        "            \n",
        "            # Replace old messages with summary\n",
        "            summary_message = SystemMessage(content=f\"**Previous conversation summary:**\\n{summary}\")\n",
        "            new_messages = [summary_message] + recent_messages\n",
        "            \n",
        "            return {\"messages\": new_messages}\n",
        "        \n",
        "        return {}\n",
        "\n",
        "print(\"✅ SimpleSummarizationMiddleware created!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Lab 1.2: HR Consultation with Summarization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Create summarization middleware\n",
        "llm = ChatOpenAI(model=\"gpt-4o-mini\", temperature=0)\n",
        "summarization_mw = SimpleSummarizationMiddleware(\n",
        "    model=llm,\n",
        "    max_tokens=500,  # Low threshold for demo\n",
        "    messages_to_keep=3\n",
        ")\n",
        "\n",
        "# Create agent with summarization\n",
        "hr_consultation_agent = create_agent(\n",
        "    model=\"openai:gpt-4o-mini\",\n",
        "    tools=[get_employee_info, check_leave_balance, get_salary_info],\n",
        "    pre_model_hook=summarization_mw.pre_model_hook,\n",
        "    checkpointer=InMemorySaver(),\n",
        "    prompt=\"\"\"You are a helpful HR consultant.\n",
        "    \n",
        "    Help employees with:\n",
        "    - General information\n",
        "    - Leave balance inquiries\n",
        "    - Career guidance\n",
        "    - Policy questions\n",
        "    \n",
        "    Be friendly, professional, and remember conversation context.\"\"\"\n",
        ")\n",
        "\n",
        "print(\"✅ HR Consultation Agent with Summarization ready!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Lab 1.3: Test Long Conversation with Auto-Summarization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "config = {\"configurable\": {\"thread_id\": \"consultation_session_1\"}}\n",
        "\n",
        "# Simulate long consultation session\n",
        "consultation_messages = [\n",
        "    \"Hi, I'm Priya Sharma, employee 101. I have some questions.\",\n",
        "    \"I joined the company in 2020 and I work in the Engineering department.\",\n",
        "    \"Can you tell me about my current role and responsibilities?\",\n",
        "    \"I'm interested in understanding the career progression path for senior developers.\",\n",
        "    \"What are the typical skills needed to become an Engineering Manager?\",\n",
        "    \"How many days of leave do I have remaining this year?\",\n",
        "    \"I'm planning to take a vacation next month. What's the leave approval process?\",\n",
        "    \"Can you check my salary information?\",\n",
        "    \"What benefits am I eligible for at my current level?\",\n",
        "    \"Tell me about the company's professional development programs.\"\n",
        "]\n",
        "\n",
        "print(\"=\" * 70)\n",
        "print(\"LONG HR CONSULTATION SESSION\")\n",
        "print(\"=\" * 70)\n",
        "\n",
        "for i, message in enumerate(consultation_messages, 1):\n",
        "    print(f\"\\n{'='*70}\")\n",
        "    print(f\"Turn {i}/10\")\n",
        "    print(f\"{'='*70}\")\n",
        "    print(f\"👤 Priya: {message}\")\n",
        "    \n",
        "    result = hr_consultation_agent.invoke(\n",
        "        {\"messages\": [{\"role\": \"user\", \"content\": message}]},\n",
        "        config\n",
        "    )\n",
        "    \n",
        "    response = result['messages'][-1].content\n",
        "    print(f\"\\n🤖 HR Agent: {response[:200]}...\")\n",
        "    print(f\"\\nTotal messages in state: {len(result['messages'])}\")\n",
        "\n",
        "print(\"\\n\" + \"=\" * 70)\n",
        "print(\"✅ Long conversation handled with automatic summarization!\")\n",
        "print(f\"\\n💡 Summary created: {summarization_mw.summary if summarization_mw.summary else 'Not yet needed'}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "# Part 2: HumanInTheLoopMiddleware 👤\n",
        "\n",
        "## Why Human-in-the-Loop?\n",
        "\n",
        "**Critical HR Operations Need Approval:**\n",
        "- 💰 Salary updates\n",
        "- 🗑️ Employee termination\n",
        "- 📝 Contract changes\n",
        "- 🎯 Performance reviews\n",
        "- 🏆 Promotions\n",
        "\n",
        "**HumanInTheLoopMiddleware Features:**\n",
        "- Intercepts tool calls before execution\n",
        "- Requests human approval\n",
        "- Allows editing tool arguments\n",
        "- Supports rejection with explanation\n",
        "- Provides manual override option\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Lab 2.1: Basic Human-in-the-Loop Setup"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Simplified Human-in-the-Loop Middleware\n",
        "class SimpleHumanInTheLoopMiddleware:\n",
        "    \"\"\"Human approval for sensitive operations.\"\"\"\n",
        "    \n",
        "    def __init__(self, tools_requiring_approval: list[str]):\n",
        "        self.approval_required = tools_requiring_approval\n",
        "        self.pending_approvals = {}\n",
        "        self.approval_history = []\n",
        "    \n",
        "    def post_model_hook(self, state: AgentState) -> dict:\n",
        "        \"\"\"Intercept tool calls and request approval.\"\"\"\n",
        "        messages = state.get(\"messages\", [])\n",
        "        \n",
        "        # Check for tool calls\n",
        "        for msg in messages:\n",
        "            if hasattr(msg, 'tool_calls') and msg.tool_calls:\n",
        "                for tool_call in msg.tool_calls:\n",
        "                    tool_name = tool_call.get('name', '')\n",
        "                    \n",
        "                    if tool_name in self.approval_required:\n",
        "                        approval_id = f\"approval_{len(self.pending_approvals) + 1}\"\n",
        "                        \n",
        "                        # Store pending approval\n",
        "                        approval_request = {\n",
        "                            \"id\": approval_id,\n",
        "                            \"tool\": tool_name,\n",
        "                            \"args\": tool_call.get('args', {}),\n",
        "                            \"status\": \"pending\",\n",
        "                            \"timestamp\": datetime.now().isoformat(),\n",
        "                            \"requested_by\": state.get(\"current_user_id\", \"unknown\")\n",
        "                        }\n",
        "                        \n",
        "                        self.pending_approvals[approval_id] = approval_request\n",
        "                        \n",
        "                        print(f\"\\n✋ [APPROVAL REQUIRED]\")\n",
        "                        print(f\"   ID: {approval_id}\")\n",
        "                        print(f\"   Tool: {tool_name}\")\n",
        "                        print(f\"   Arguments: {tool_call.get('args', {})}\")\n",
        "                        print(f\"   Requested by: {approval_request['requested_by']}\")\n",
        "                        \n",
        "                        # Pause execution\n",
        "                        return {\n",
        "                            \"messages\": [(\n",
        "                                \"assistant\",\n",
        "                                f\"⏸️  **Approval Required**\\n\\n\"\n",
        "                                f\"Operation: `{tool_name}`\\n\"\n",
        "                                f\"Details: {json.dumps(tool_call.get('args', {}), indent=2)}\\n\\n\"\n",
        "                                f\"Approval ID: `{approval_id}`\\n\\n\"\n",
        "                                f\"This operation requires manager approval. \"\n",
        "                                f\"Please have your manager review and approve this request.\"\n",
        "                            )],\n",
        "                            \"jump_to\": \"__end__\"  # Stop execution\n",
        "                        }\n",
        "        \n",
        "        return {}\n",
        "    \n",
        "    def approve(self, approval_id: str, approved: bool, approver_id: str = \"unknown\", notes: str = \"\"):\n",
        "        \"\"\"Approve or reject an operation.\"\"\"\n",
        "        if approval_id in self.pending_approvals:\n",
        "            approval = self.pending_approvals[approval_id]\n",
        "            approval[\"status\"] = \"approved\" if approved else \"rejected\"\n",
        "            approval[\"approver_id\"] = approver_id\n",
        "            approval[\"approval_timestamp\"] = datetime.now().isoformat()\n",
        "            approval[\"notes\"] = notes\n",
        "            \n",
        "            # Move to history\n",
        "            self.approval_history.append(approval)\n",
        "            del self.pending_approvals[approval_id]\n",
        "            \n",
        "            return True\n",
        "        return False\n",
        "    \n",
        "    def edit_and_approve(self, approval_id: str, new_args: dict, approver_id: str = \"unknown\"):\n",
        "        \"\"\"Edit arguments and approve.\"\"\"\n",
        "        if approval_id in self.pending_approvals:\n",
        "            approval = self.pending_approvals[approval_id]\n",
        "            approval[\"original_args\"] = approval[\"args\"].copy()\n",
        "            approval[\"args\"] = new_args\n",
        "            approval[\"status\"] = \"approved_with_edits\"\n",
        "            approval[\"approver_id\"] = approver_id\n",
        "            approval[\"approval_timestamp\"] = datetime.now().isoformat()\n",
        "            \n",
        "            self.approval_history.append(approval)\n",
        "            del self.pending_approvals[approval_id]\n",
        "            \n",
        "            return True\n",
        "        return False\n",
        "    \n",
        "    def get_pending_approvals(self):\n",
        "        \"\"\"Get all pending approvals.\"\"\"\n",
        "        return self.pending_approvals\n",
        "    \n",
        "    def get_approval_history(self):\n",
        "        \"\"\"Get approval history.\"\"\"\n",
        "        return self.approval_history\n",
        "\n",
        "print(\"✅ SimpleHumanInTheLoopMiddleware created!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Lab 2.2: HR Operations with Approval Workflow"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Create human-in-the-loop middleware\n",
        "hitl_mw = SimpleHumanInTheLoopMiddleware(\n",
        "    tools_requiring_approval=[\"update_salary\", \"approve_leave\"]\n",
        ")\n",
        "\n",
        "# Custom state for tracking user info\n",
        "class HRAgentState(AgentState):\n",
        "    current_user_id: str = \"\"\n",
        "    current_user_role: str = \"\"\n",
        "\n",
        "# Create agent with approval workflow\n",
        "hr_approval_agent = create_agent(\n",
        "    model=\"openai:gpt-4o-mini\",\n",
        "    tools=[get_employee_info, check_leave_balance, update_salary, approve_leave],\n",
        "    post_model_hook=hitl_mw.post_model_hook,\n",
        "    state_schema=HRAgentState,\n",
        "    prompt=\"\"\"You are an HR operations assistant.\n",
        "    \n",
        "    You help with:\n",
        "    - Employee information lookup\n",
        "    - Leave balance checks\n",
        "    - Salary updates (requires approval)\n",
        "    - Leave approvals (requires manager approval)\n",
        "    \n",
        "    Always be professional and follow proper procedures.\"\"\"\n",
        ")\n",
        "\n",
        "print(\"✅ HR Agent with Approval Workflow ready!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Lab 2.3: Test Approval Workflow - Salary Update"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "print(\"=\" * 70)\n",
        "print(\"SCENARIO 1: Salary Update Request\")\n",
        "print(\"=\" * 70)\n",
        "\n",
        "# Step 1: Request salary update\n",
        "print(\"\\n📝 Step 1: Employee requests salary update...\\n\")\n",
        "\n",
        "result = hr_approval_agent.invoke({\n",
        "    \"messages\": [{\"role\": \"user\", \"content\": \"Please update the salary for employee 101 (Priya Sharma) to ₹150,000\"}],\n",
        "    \"current_user_id\": \"102\",\n",
        "    \"current_user_role\": \"Engineering Manager\"\n",
        "})\n",
        "\n",
        "print(f\"🤖 Agent Response:\\n{result['messages'][-1].content}\")\n",
        "\n",
        "# Step 2: Check pending approvals\n",
        "print(\"\\n\" + \"=\" * 70)\n",
        "print(\"📋 Step 2: Review pending approvals...\")\n",
        "print(\"=\" * 70)\n",
        "\n",
        "pending = hitl_mw.get_pending_approvals()\n",
        "print(f\"\\nPending approvals: {len(pending)}\")\n",
        "\n",
        "for approval_id, details in pending.items():\n",
        "    print(f\"\\n🔍 Approval Details:\")\n",
        "    print(json.dumps(details, indent=2))\n",
        "    \n",
        "    # Step 3: Manager reviews and approves\n",
        "    print(\"\\n\" + \"=\" * 70)\n",
        "    print(\"✅ Step 3: Manager approves...\")\n",
        "    print(\"=\" * 70)\n",
        "    \n",
        "    hitl_mw.approve(\n",
        "        approval_id=approval_id,\n",
        "        approved=True,\n",
        "        approver_id=\"103\",  # HR Director Anjali Patel\n",
        "        notes=\"Approved based on performance review and market adjustment\"\n",
        "    )\n",
        "    print(f\"✅ Approval {approval_id} APPROVED by HR Director (103)\")\n",
        "\n",
        "# Step 4: View approval history\n",
        "print(\"\\n\" + \"=\" * 70)\n",
        "print(\"📜 Step 4: Approval History\")\n",
        "print(\"=\" * 70)\n",
        "\n",
        "history = hitl_mw.get_approval_history()\n",
        "for entry in history:\n",
        "    print(f\"\\n{entry['id']}:\")\n",
        "    print(f\"  Tool: {entry['tool']}\")\n",
        "    print(f\"  Status: {entry['status']}\")\n",
        "    print(f\"  Requested by: {entry['requested_by']}\")\n",
        "    print(f\"  Approved by: {entry.get('approver_id', 'N/A')}\")\n",
        "    print(f\"  Notes: {entry.get('notes', 'N/A')}\")\n",
        "\n",
        "print(\"\\n✅ Approval workflow completed!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Lab 2.4: Test Rejection Scenario"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "print(\"=\" * 70)\n",
        "print(\"SCENARIO 2: Leave Approval Request - REJECTION\")\n",
        "print(\"=\" * 70)\n",
        "\n",
        "# Request leave approval\n",
        "print(\"\\n📝 Step 1: Request leave approval...\\n\")\n",
        "\n",
        "result = hr_approval_agent.invoke({\n",
        "    \"messages\": [{\"role\": \"user\", \"content\": \"Approve 20 days leave for employee 101\"}],\n",
        "    \"current_user_id\": \"102\",\n",
        "    \"current_user_role\": \"Engineering Manager\"\n",
        "})\n",
        "\n",
        "print(f\"🤖 Agent Response:\\n{result['messages'][-1].content}\")\n",
        "\n",
        "# Check and reject\n",
        "pending = hitl_mw.get_pending_approvals()\n",
        "\n",
        "for approval_id, details in pending.items():\n",
        "    print(f\"\\n🔍 Approval Request:\")\n",
        "    print(json.dumps(details, indent=2))\n",
        "    \n",
        "    print(\"\\n\" + \"=\" * 70)\n",
        "    print(\"❌ Step 2: Manager REJECTS...\")\n",
        "    print(\"=\" * 70)\n",
        "    \n",
        "    hitl_mw.approve(\n",
        "        approval_id=approval_id,\n",
        "        approved=False,\n",
        "        approver_id=\"102\",  # Engineering Manager Rahul Verma\n",
        "        notes=\"Rejected: Critical project deadline. Please reschedule for next month.\"\n",
        "    )\n",
        "    print(f\"❌ Approval {approval_id} REJECTED by Manager (102)\")\n",
        "\n",
        "# View updated history\n",
        "print(\"\\n\" + \"=\" * 70)\n",
        "print(\"📜 Complete Approval History\")\n",
        "print(\"=\" * 70)\n",
        "\n",
        "for entry in hitl_mw.get_approval_history():\n",
        "    status_icon = \"✅\" if entry['status'] == \"approved\" else \"❌\"\n",
        "    print(f\"\\n{status_icon} {entry['id']} - {entry['status'].upper()}\")\n",
        "    print(f\"   Tool: {entry['tool']}\")\n",
        "    print(f\"   Args: {entry['args']}\")\n",
        "    print(f\"   Requested: {entry['timestamp']}\")\n",
        "    print(f\"   By: {entry['requested_by']}\")\n",
        "    print(f\"   Approver: {entry.get('approver_id', 'N/A')}\")\n",
        "    print(f\"   Notes: {entry.get('notes', 'N/A')}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Lab 2.5: Edit-and-Approve Scenario"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "print(\"=\" * 70)\n",
        "print(\"SCENARIO 3: Salary Update with EDITS\")\n",
        "print(\"=\" * 70)\n",
        "\n",
        "# Request unrealistic salary increase\n",
        "print(\"\\n📝 Step 1: Request salary update...\\n\")\n",
        "\n",
        "result = hr_approval_agent.invoke({\n",
        "    \"messages\": [{\"role\": \"user\", \"content\": \"Update salary for employee 104 (Arjun Reddy) to ₹300,000\"}],\n",
        "    \"current_user_id\": \"105\",\n",
        "    \"current_user_role\": \"Sales Director\"\n",
        "})\n",
        "\n",
        "print(f\"🤖 Agent Response:\\n{result['messages'][-1].content}\")\n",
        "\n",
        "# Manager edits and approves with lower amount\n",
        "pending = hitl_mw.get_pending_approvals()\n",
        "\n",
        "for approval_id, details in pending.items():\n",
        "    print(f\"\\n🔍 Original Request:\")\n",
        "    print(f\"   Employee: {details['args']['employee_id']}\")\n",
        "    print(f\"   Requested Salary: ₹{details['args']['new_salary']:,}\")\n",
        "    \n",
        "    print(\"\\n\" + \"=\" * 70)\n",
        "    print(\"✏️  Step 2: Manager EDITS and APPROVES...\")\n",
        "    print(\"=\" * 70)\n",
        "    \n",
        "    # Edit to more reasonable amount\n",
        "    new_args = {\n",
        "        \"employee_id\": details['args']['employee_id'],\n",
        "        \"new_salary\": 180000  # Edited from 300000 to 180000\n",
        "    }\n",
        "    \n",
        "    hitl_mw.edit_and_approve(\n",
        "        approval_id=approval_id,\n",
        "        new_args=new_args,\n",
        "        approver_id=\"103\"  # HR Director\n",
        "    )\n",
        "    \n",
        "    print(f\"✅ Approval {approval_id} EDITED and APPROVED\")\n",
        "    print(f\"   Original: ₹{details['args']['new_salary']:,}\")\n",
        "    print(f\"   Approved: ₹{new_args['new_salary']:,}\")\n",
        "    print(f\"   Reason: Adjusted to market rate and budget constraints\")\n",
        "\n",
        "# Final history\n",
        "print(\"\\n\" + \"=\" * 70)\n",
        "print(\"📊 COMPLETE APPROVAL AUDIT TRAIL\")\n",
        "print(\"=\" * 70)\n",
        "\n",
        "for i, entry in enumerate(hitl_mw.get_approval_history(), 1):\n",
        "    print(f\"\\n{'='*70}\")\n",
        "    print(f\"Approval #{i}: {entry['id']}\")\n",
        "    print(f\"{'='*70}\")\n",
        "    print(f\"Operation: {entry['tool']}\")\n",
        "    print(f\"Status: {entry['status'].upper()}\")\n",
        "    print(f\"Requested by: {entry['requested_by']} at {entry['timestamp']}\")\n",
        "    print(f\"Decided by: {entry.get('approver_id', 'N/A')} at {entry.get('approval_timestamp', 'N/A')}\")\n",
        "    \n",
        "    if 'original_args' in entry:\n",
        "        print(f\"\\nOriginal Arguments:\")\n",
        "        print(f\"  {json.dumps(entry['original_args'], indent=2)}\")\n",
        "        print(f\"Modified Arguments:\")\n",
        "        print(f\"  {json.dumps(entry['args'], indent=2)}\")\n",
        "    else:\n",
        "        print(f\"Arguments: {json.dumps(entry['args'], indent=2)}\")\n",
        "    \n",
        "    if entry.get('notes'):\n",
        "        print(f\"Notes: {entry['notes']}\")\n",
        "\n",
        "print(\"\\n✅ All approval scenarios demonstrated!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "# Part 3: Combining Both Middlewares\n",
        "\n",
        "**Production Pattern:** Use both summarization and approval together"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Create combined middleware\n",
        "combined_summarization_mw = SimpleSummarizationMiddleware(\n",
        "    model=llm,\n",
        "    max_tokens=1000,\n",
        "    messages_to_keep=5\n",
        ")\n",
        "\n",
        "combined_hitl_mw = SimpleHumanInTheLoopMiddleware(\n",
        "    tools_requiring_approval=[\"update_salary\", \"approve_leave\"]\n",
        ")\n",
        "\n",
        "# Combine hooks\n",
        "def combined_pre_hook(state: AgentState) -> dict:\n",
        "    \"\"\"Run summarization check.\"\"\"\n",
        "    return combined_summarization_mw.pre_model_hook(state)\n",
        "\n",
        "def combined_post_hook(state: AgentState) -> dict:\n",
        "    \"\"\"Run approval check.\"\"\"\n",
        "    return combined_hitl_mw.post_model_hook(state)\n",
        "\n",
        "# Create production-ready agent\n",
        "production_hr_agent = create_agent(\n",
        "    model=\"openai:gpt-4o-mini\",\n",
        "    tools=[get_employee_info, check_leave_balance, get_salary_info, update_salary, approve_leave],\n",
        "    pre_model_hook=combined_pre_hook,\n",
        "    post_model_hook=combined_post_hook,\n",
        "    state_schema=HRAgentState,\n",
        "    checkpointer=InMemorySaver(),\n",
        "    prompt=\"\"\"You are a comprehensive HR assistant.\n",
        "    \n",
        "    Capabilities:\n",
        "    - Employee information and queries\n",
        "    - Leave management\n",
        "    - Salary operations (requires approval)\n",
        "    - Long consultation sessions (with auto-summarization)\n",
        "    \n",
        "    You maintain context across long conversations and ensure\n",
        "    all critical operations get proper approval.\"\"\"\n",
        ")\n",
        "\n",
        "print(\"✅ Production HR Agent with BOTH middlewares ready!\")\n",
        "print(\"\\nFeatures:\")\n",
        "print(\"  📝 Auto-summarization for long conversations\")\n",
        "print(\"  👤 Human approval for critical operations\")\n",
        "print(\"  💾 Conversation persistence\")\n",
        "print(\"  🔒 Security and compliance\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "# Summary & Best Practices\n",
        "\n",
        "## Built-in Middleware Overview\n",
        "\n",
        "| Middleware | Purpose | When to Use |\n",
        "|------------|---------|-------------|\n",
        "| **SummarizationMiddleware** | Auto-summarize old messages | Long conversations, consulting sessions |\n",
        "| **HumanInTheLoopMiddleware** | Require approval for tools | Critical operations, compliance needs |\n",
        "\n",
        "## Key Patterns Learned\n",
        "\n",
        "### 1. Summarization Pattern\n",
        "```python\n",
        "summarization_mw = SimpleSummarizationMiddleware(\n",
        "    model=llm,\n",
        "    max_tokens=2000,\n",
        "    messages_to_keep=5\n",
        ")\n",
        "agent = create_agent(\n",
        "    ...,\n",
        "    pre_model_hook=summarization_mw.pre_model_hook\n",
        ")\n",
        "```\n",
        "\n",
        "### 2. Approval Pattern\n",
        "```python\n",
        "hitl_mw = SimpleHumanInTheLoopMiddleware(\n",
        "    tools_requiring_approval=[\"sensitive_tool\"]\n",
        ")\n",
        "agent = create_agent(\n",
        "    ...,\n",
        "    post_model_hook=hitl_mw.post_model_hook\n",
        ")\n",
        "\n",
        "# Later: approve/reject\n",
        "hitl_mw.approve(approval_id, approved=True, approver_id=\"manager\")\n",
        "```\n",
        "\n",
        "## Production Checklist\n",
        "\n",
        "✅ **Summarization:**\n",
        "- Set appropriate token thresholds\n",
        "- Keep enough recent messages for context\n",
        "- Test summary quality\n",
        "- Monitor token usage\n",
        "\n",
        "✅ **Human-in-the-Loop:**\n",
        "- Identify tools requiring approval\n",
        "- Implement notification system\n",
        "- Store approval history for audit\n",
        "- Set timeout policies\n",
        "- Handle approval UI/UX\n",
        "\n",
        "✅ **Combined:**\n",
        "- Use both for comprehensive HR agents\n",
        "- Chain hooks properly\n",
        "- Test interaction between middlewares\n",
        "- Document approval workflows\n",
        "\n",
        "## Next Steps\n",
        "\n",
        "- Explore decorator-based middleware\n",
        "- Learn class-based middleware patterns\n",
        "- Implement custom middleware\n",
        "- Build production approval systems\n",
        "\n",
        "---\n",
        "\n",
        "**Congratulations!** You now know how to use built-in middlewares for production HR agents! 🎉"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.0"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
