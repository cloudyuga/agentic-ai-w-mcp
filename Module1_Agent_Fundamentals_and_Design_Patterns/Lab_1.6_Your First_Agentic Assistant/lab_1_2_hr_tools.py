# -*- coding: utf-8 -*-
"""lab_1_2_hr_tools.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rqKHXRX7v8apgfrW9YNR0LwUkqF6X2TZ
"""

# hr_tools.py
from langchain_core.tools import tool
from lab_1_1_hr_data import EMPLOYEES, POLICIES

@tool
def get_leave_balance(employee_id: str) -> str:
    """Gets the available leave balance for a specified employee."""
    if employee_id in EMPLOYEES:
        emp = EMPLOYEES[employee_id]
        return f"{emp['name']} has {emp['leave_balance']} annual leave days and {emp['sick_leave']} sick leave days remaining."
    return f"Employee with ID '{employee_id}' was not found in the database."

@tool
def get_company_policy(policy_name: str) -> str:
    """Retrieves the text of a specific company policy."""
    policy_key = policy_name.lower().replace(" ", "_")
    if policy_key in POLICIES:
        return POLICIES[policy_key]
    return f"Policy '{policy_name}' not found. Available policies are: {', '.join(POLICIES.keys())}"

@tool
def request_leave(employee_id: str, leave_days: int, start_date: str) -> str:
    """Submits a leave request for an employee."""
    if employee_id not in EMPLOYEES:
        return f"Employee with ID '{employee_id}' was not found."

    emp = EMPLOYEES[employee_id]
    if leave_days > emp['leave_balance']:
        return f"Leave request DENIED. {emp['name']} only has {emp['leave_balance']} days available, but requested {leave_days}."

    if leave_days > 15:
        return "Leave request DENIED. The maximum number of consecutive leave days allowed is 15."

    return f"Leave request for {emp['name']} for {leave_days} days starting {start_date} has been successfully submitted for manager approval."

@tool
def get_employee_info(employee_id: str) -> str:
    """Gets basic information for a specified employee, such as their name, department, and joining date."""
    if employee_id in EMPLOYEES:
        emp = EMPLOYEES[employee_id]
        return f"Employee Name: {emp['name']}\nDepartment: {emp['department']}\nJoined Date: {emp['joined_date']}"
    return f"Employee with ID '{employee_id}' was not found."

if __name__ == '__main__':
    print("--- Testing HR Tools ---")
    print("\n1. Testing 'get_leave_balance' for EMP001:")
    print(get_leave_balance.invoke({"employee_id": "EMP001"}))

    print("\n2. Testing 'get_company_policy' for 'work from home':")
    print(get_company_policy.invoke({"policy_name": "work from home"}))

    print("\n3. Testing 'request_leave' for a valid request:")
    print(request_leave.invoke({"employee_id": "EMP003", "leave_days": 10, "start_date": "2025-11-10"}))

    print("\n4. Testing 'request_leave' for an invalid request (insufficient balance):")
    print(request_leave.invoke({"employee_id": "EMP001", "leave_days": 20, "start_date": "2025-12-01"}))

    print("\n5. Testing 'get_employee_info' for EMP002:")
    print(get_employee_info.invoke({"employee_id": "EMP002"}))