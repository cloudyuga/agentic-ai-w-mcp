# -*- coding: utf-8 -*-
"""lab_1_3_interactive_hr_agent

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eUsxo7D2qmPccK7PryFZlc3JotJ75-43
"""

# ==============================================================================
# 1. SETUP - INSTALL AND IMPORT LIBS
# ==============================================================================
!pip install langchain langchain-openai python-dotenv --quiet

import os
from langchain_openai import ChatOpenAI
from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.messages import HumanMessage, AIMessage
from lab_1_2_hr_tools import get_leave_balance, get_company_policy, request_leave, get_employee_info

# ==============================================================================
# 2. CONFIGURE THE AGENT
# ==============================================================================
try:
    from google.colab import userdata
    os.environ["OPENAI_API_KEY"] = userdata.get('OPENAI_API_KEY')
    print("‚úÖ OpenAI API Key set successfully from Colab Secrets.")
except (ImportError, userdata.SecretNotFoundError):
    # Fallback for local development if not in Colab
    from dotenv import load_dotenv
    load_dotenv()
    if "OPENAI_API_KEY" in os.environ:
        print("‚úÖ OpenAI API Key set successfully from .env file.")
    else:
        print("‚ö†Ô∏è API Key not found. Please set it in Colab Secrets or a .env file.")

llm = ChatOpenAI(model="gpt-4o-mini", temperature=0)
tools = [get_leave_balance, get_company_policy, request_leave, get_employee_info]

prompt = ChatPromptTemplate.from_messages([
    ("system", "You are a helpful and friendly HR assistant. Your goal is to assist employees with their HR-related queries accurately and professionally. Use the available tools to find information and perform actions. If you cannot answer a question, say so politely."),
    ("placeholder", "{chat_history}"),
    ("human", "{input}"),
    ("placeholder", "{agent_scratchpad}"),
])

agent = create_tool_calling_agent(llm, tools, prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

# ==============================================================================
# 3. CREATE THE INTERACTIVE CHAT LOOP
# ==============================================================================
def main():
    print("="*60)
    print("ü§ñ Welcome to the Interactive HR Assistant!")
    print("="*60)
    print("\nI can help you with:")
    print("- Leave balances (e.g., 'What is the leave balance for EMP001?')")
    print("- Company policies (e.g., 'Tell me about the work from home policy')")
    print("- Leave requests (e.g., 'Request 5 days of leave for EMP002 starting next Monday')")
    print("- Employee information (e.g., 'Who is EMP003?')")
    print("\nType 'quit' or 'exit' to end the conversation.\n")

    chat_history = []

    while True:
        user_input = input("You: ").strip()

        if user_input.lower() in ['quit', 'exit', 'bye']:
            print("\nHR Assistant: Thank you for using the HR Assistant. Have a great day!")
            break

        if not user_input:
            continue

        try:
            response = agent_executor.invoke({
                "input": user_input,
                "chat_history": chat_history
            })

            print(f"\nHR Assistant: {response['output']}\n")

            chat_history.append(HumanMessage(content=user_input))
            chat_history.append(AIMessage(content=response['output']))

        except Exception as e:
            print(f"\nAn error occurred: {e}\n")

if __name__ == "__main__":
    main()